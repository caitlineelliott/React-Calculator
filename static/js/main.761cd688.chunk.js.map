{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DisplayOutput","props","backgroundColor","color","transition","id","type","value","output","style","readOnly","Button","onClick","label","Number","parseFloat","parseInt","Calculator","useState","userInput","setInput","previousNum","setPrevNum","currentNum","setCurrentNum","operator","setOperator","outputColor","setOutputColor","addToInput","e","target","storeOperator","indexOf","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761cd688.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from \"react\";\nimport React from 'react';\n\nfunction DisplayOutput(props) {\n\n  const backgroundColor = {\n    backgroundColor: props.color,\n    transition: 'all 500ms',\n  }\n\n  return (\n    <input id=\"output\" type=\"text\" value={props.output} style={backgroundColor} readOnly />\n  )\n}\n\nfunction Button(props) {\n  return (\n    <button id={props.value} onClick={props.onClick}>{props.label}</button>\n  )\n}\n\nNumber.parseFloat()\nNumber.parseInt()\n\nconst operation = [9, '+', 87, '*']\n\nfunction Calculator() {\n  let [userInput, setInput] = useState('');\n  let [previousNum, setPrevNum] = useState('');\n  let [currentNum, setCurrentNum] = useState('');\n  let [operator, setOperator] = useState('');\n  let [outputColor, setOutputColor] = useState('#FC466B');\n\n\n  function addToInput(e) {\n    userInput = userInput + e.target.id;\n    setInput(userInput);\n  }\n\n  function addDecimal(e) {\n    if (userInput.indexOf(\".\") === -1) {\n      userInput = userInput + e.target.id;\n      setInput(userInput);\n    }\n  }\n\n  function addZero(e) {\n    if (userInput !== \"\") {\n      userInput = userInput + e.target.id;\n      setInput(userInput);\n    }\n  }\n\n  function negateNum() {\n    if (userInput !== \"\") {\n      userInput = userInput * -1;\n      setInput(userInput);\n    }\n  }\n\n  function calculatePercent() {\n    if (userInput !== \"\") {\n      userInput = userInput / 100;\n      setInput(userInput);\n    }\n  }\n\n  function clearInput() {\n    setInput('');\n    userInput = '';\n    setOutputColor('#FC466B')\n  }\n\n  function storeOperator(e) {\n    setOperator(e.target.id);\n    previousNum = userInput;\n    setPrevNum(previousNum);\n    setInput('');\n  }\n\n  function evaluate() {\n    currentNum = userInput;\n    setOutputColor('#3F5EFB');\n    if (operator === 'add') {\n      setInput(parseFloat(previousNum) + parseFloat(currentNum));\n    } else if (operator === 'subtract') {\n      setInput(parseFloat(previousNum) - parseFloat(currentNum));\n    } else if (operator === 'multiply') {\n      setInput(parseFloat(previousNum) * parseFloat(currentNum));\n    } else if (operator === 'divide') {\n      setInput(parseFloat(previousNum) / parseFloat(currentNum));\n    }\n    setPrevNum('');\n    setCurrentNum('');\n  }\n\n  return (\n    <div id=\"calculator-container\">\n      <DisplayOutput output={userInput} color={outputColor} />\n      <div id=\"btnContainer\">\n        <div id=\"col1\">\n          <div id=\"top-functions\">\n            <Button label='c' value={'clear'} onClick={clearInput} />\n            <Button label='+/-' value={'+/-'} onClick={negateNum} />\n            <Button label='%' value={'%'} onClick={calculatePercent} />\n          </div>\n          <div id=\"number-btns\">\n            <Button label={'7'} value={'7'} onClick={addToInput} />\n            <Button label={'8'} value={'8'} onClick={addToInput} />\n            <Button label={'9'} value={'9'} onClick={addToInput} />\n            <Button label={'4'} value={'4'} onClick={addToInput} />\n            <Button label={'5'} value={'5'} onClick={addToInput} />\n            <Button label={'6'} value={'6'} onClick={addToInput} />\n            <Button label={'1'} value={'1'} onClick={addToInput} />\n            <Button label={'2'} value={'2'} onClick={addToInput} />\n            <Button label={'3'} value={'3'} onClick={addToInput} />\n            <Button label={'0'} value={'0'} onClick={addZero} />\n            <Button label={'.'} value={'.'} onClick={addDecimal} />\n          </div>\n        </div>\n        <div id=\"col2\">\n          <div id=\"operations\">\n            <Button label='รท' value={'divide'} onClick={storeOperator} />\n            <Button label={'x'} value={'multiply'} onClick={storeOperator} />\n            <Button label={'-'} value={'subtract'} onClick={storeOperator} />\n            <Button label={'+'} value={'add'} onClick={storeOperator} />\n            <Button label={'='} value={'='} onClick={evaluate} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction App(props) {\n  return (\n    <Calculator />\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { render } from '@testing-library/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <application />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}